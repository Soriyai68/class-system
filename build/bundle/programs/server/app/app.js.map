{"version":3,"sources":["meteor://💻app/imports/api/Auth/projects.js","meteor://💻app/imports/api/courses/collection.js","meteor://💻app/imports/api/courses/index.js","meteor://💻app/imports/api/courses/methods.js","meteor://💻app/imports/api/enrollment/collection.js","meteor://💻app/imports/api/enrollment/index.js","meteor://💻app/imports/api/enrollment/methods.js","meteor://💻app/imports/api/students/collection.js","meteor://💻app/imports/api/students/index.js","meteor://💻app/imports/api/students/methods.js","meteor://💻app/imports/api/teachers/collection.js","meteor://💻app/imports/api/teachers/index.js","meteor://💻app/imports/api/teachers/methods.js","meteor://💻app/imports/api/index.js","meteor://💻app/server/main.js"],"names":["_objectSpread","module","link","default","v","export","UserClass","Mongo","__reifyWaitForDeps__","Collection","Meteor","isServer","allow","insert","update","remove","methods","userClass.insert","userData","userId","Error","owner","createdAt","Date","role","status","userClass.update","updates","$set","updatedAt","userClass.remove","__reify_async_result__","_reifyError","self","async","Courses","SimpleSchema","CoursesSchema","course_name","type","String","label","description","teacher_id","_Courses$attachSchema","attachSchema","call","_objectWithoutProperties","_excluded","ValidatedMethod","Teachers","name","mixins","validate","max","optional","validator","run","courseData","console","log","teacher","findOneAsync","courseId","insertAsync","error","concat","message","coursesList","find","fetch","_id","_ref","course","removeAsync","updateData","result","updateAsync","Enrollment","en","EnrollmentSchema","student_id","course_id","enrollment_date","enrollment_cost","Number","_Enrollment$attachSch","Students","enrollmentData","student","enrollmentCount","countAsync","enrollmentId","enrollmentsList","_ref2","StudentsSchema","first_name","last_name","date_of_birth","email","phone","address","_Students$attachSchem","studentData","studentId","studentsList","TeachersSchema","subject","_Teachers$attachSchem","teacherData"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\r\nexport const UserClass = new Mongo.Collection('userClass');\r\n\r\n// Security rules (server-side only)\r\nif (Meteor.isServer) {\r\n  UserClass.allow({\r\n    insert: () => false, // Disallow direct inserts\r\n    update: () => false, // Disallow direct updates\r\n    remove: () => false // Disallow direct removes\r\n  });\r\n}\r\n\r\n Meteor.methods({\r\n  'userClass.insert'(userData) {\r\n    if (!this.userId) throw new Meteor.Error('Not authorized');\r\n    \r\n    return UserClass.insert({\r\n      ...userData,\r\n      owner: this.userId,\r\n      createdAt: new Date(),\r\n      role: 'user', // Default role\r\n      status: 'active'\r\n    });\r\n  },\r\n\r\n  'userClass.update'(userId, updates) {\r\n    if (!this.userId || this.userId !== userId) {\r\n      throw new Meteor.Error('Not authorized');\r\n    }\r\n    \r\n    return UserClass.update(userId, {\r\n      $set: {\r\n        ...updates,\r\n        updatedAt: new Date()\r\n      }\r\n    });\r\n  },\r\n\r\n  'userClass.remove'(userId) {\r\n    if (!this.userId || this.userId !== userId) {\r\n      throw new Meteor.Error('Not authorized');\r\n    }\r\n    return UserClass.remove(userId);\r\n  }\r\n});","import { Mongo } from 'meteor/mongo';\r\nimport SimpleSchema from 'simpl-schema';\r\n\r\nexport const Courses = new Mongo.Collection('courses');\r\n\r\nconst CoursesSchema = new SimpleSchema({\r\n    course_name: {\r\n        type: String,\r\n        label: \"Course Name\",\r\n    },\r\n    description: {\r\n        type: String,\r\n        label: \"Course Description\",\r\n    },\r\n    teacher_id: {\r\n        type: String,\r\n        label: \"Teacher ID\",\r\n    }\r\n});\r\n\r\nCourses.attachSchema?.(CoursesSchema);\r\n\r\n","import \"./methods\";","import { ValidatedMethod } from 'meteor/mdg:validated-method';\r\nimport SimpleSchema from 'simpl-schema';\r\nimport { Courses } from './collection';\r\nimport { Teachers } from '../teachers/collection';\r\n\r\n\r\nnew ValidatedMethod({\r\n    name: 'insertCourse',\r\n    mixins: [],\r\n    validate: new SimpleSchema({\r\n        course_name: { type: String, max: 100 },\r\n        description: { type: String, optional: true },\r\n        teacher_id: { type: String },\r\n    }).validator(),\r\n    async run(courseData) {\r\n        console.log('Received course data:', courseData);\r\n\r\n        if (!this.userId) {\r\n            throw new Meteor.Error('Not authorized', 'You must be logged in to add courses.');\r\n        }\r\n\r\n        try {\r\n            // Log Teachers collection to make sure it's accessible\r\n            console.log('Teachers collection:', Teachers);\r\n\r\n            // Ensure teacher exists\r\n            const teacher = await Teachers.findOneAsync(courseData.teacher_id);\r\n            if (!teacher) {\r\n                throw new Meteor.Error('Invalid teacher', 'The specified teacher does not exist.');\r\n            }\r\n\r\n            console.log('Teacher found:', teacher);\r\n\r\n            // Insert the course data into the Courses collection\r\n            const courseId = await Courses.insertAsync(courseData);\r\n            console.log('Inserted course ID:', courseId);\r\n\r\n            return courseId;\r\n        } catch (error) {\r\n            console.error('Error during insert:', error);\r\n            throw new Meteor.Error('Database Error', `Failed to insert course: ${error.message}`);\r\n        }\r\n    },\r\n});\r\n\r\n// Fetch Courses Method\r\nnew ValidatedMethod({\r\n    name: 'fetchCourses',\r\n    mixins: [],\r\n    validate: null, // No validation needed for fetching courses\r\n    async run() {\r\n        if (!this.userId) {\r\n            throw new Meteor.Error('Not authorized', 'You must be logged in to fetch courses.');\r\n        }\r\n\r\n        try {\r\n            console.log('Fetching all courses');  // Log when fetch operation starts\r\n            const coursesList = await Courses.find().fetch();\r\n            console.log('Fetched courses:', coursesList);  // Log the fetched courses list\r\n            return coursesList; // Return the list of courses\r\n        } catch (error) {\r\n            console.error('Failed to fetch courses:', error);  // Log any fetch errors\r\n            throw new Meteor.Error('Database Error', `Failed to fetch courses: ${error.message}`);\r\n        }\r\n    },\r\n});\r\n\r\n// Delete Course Method\r\nnew ValidatedMethod({\r\n    name: 'deleteCourse',\r\n    mixins: [],\r\n    validate: new SimpleSchema({\r\n        _id: { type: String },\r\n    }).validator(),\r\n    async run({ _id }) {\r\n        if (!this.userId) {\r\n            throw new Meteor.Error('Not authorized', 'You must be logged in to delete courses.');\r\n        }\r\n\r\n        try {\r\n            const course = await Courses.findOneAsync({ _id });\r\n            if (!course) {\r\n                throw new Meteor.Error('Course not found', 'The course you are trying to delete does not exist.');\r\n            }\r\n\r\n            await Courses.removeAsync({ _id });\r\n            console.log(`Deleted course with ID: ${_id}`);\r\n            return { message: 'Course deleted successfully!' };\r\n        } catch (error) {\r\n            console.error('Failed to delete course:', error);  // Log the actual error\r\n            throw new Meteor.Error('Database Error', `Failed to delete course: ${error.message}`);\r\n        }\r\n    },\r\n});\r\n\r\n// Update Course Method\r\nnew ValidatedMethod({\r\n    name: 'updateCourse',\r\n    mixins: [],\r\n    validate: new SimpleSchema({\r\n        _id: { type: String },\r\n        course_name: { type: String, optional: true },\r\n        description: { type: String, optional: true },\r\n        teacher_id: { type: String, optional: true },\r\n    }).validator(),\r\n    async run(courseData) {\r\n        if (!this.userId) {\r\n            throw new Meteor.Error('Not authorized', 'You must be logged in to update courses.');\r\n        }\r\n\r\n        try {\r\n            const { _id, ...updateData } = courseData;\r\n\r\n            // Ensure the course exists before updating\r\n            const course = await Courses.findOneAsync({ _id });\r\n            if (!course) {\r\n                throw new Meteor.Error('Course not found', 'The course you are trying to update does not exist.');\r\n            }\r\n\r\n            // Update the course in the collection\r\n            const result = await Courses.updateAsync({ _id }, { $set: updateData });\r\n            console.log(`Updated course with ID: ${_id}`);\r\n            return result;\r\n        } catch (error) {\r\n            console.error('Failed to update course:', error);  // Log the actual error\r\n            throw new Meteor.Error('Database Error', `Failed to update course: ${error.message}`);\r\n        }\r\n    },\r\n});\r\n","// import { en } from 'element-plus/es/locales.mjs';\r\nimport { en } from 'element-plus/es/locales.mjs';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport SimpleSchema from 'simpl-schema';\r\n\r\nexport const Enrollment = new Mongo.Collection('enrollment');\r\n\r\nconst EnrollmentSchema = new SimpleSchema({\r\n   \r\n    student_id: {\r\n        type: String,\r\n        label: \"Student ID\",\r\n    },\r\n    course_id: {\r\n        type: String,\r\n        label: \"Course ID\",\r\n    },\r\n    enrollment_date: {\r\n        type: Date,\r\n        label: \"Enrollment Date\",\r\n    },\r\n    enrollment_cost: {\r\n        type: Number,\r\n        label: \"Enrollment Cost\",\r\n    },\r\n});\r\n\r\nEnrollment.attachSchema?.(EnrollmentSchema);\r\n\r\n","import \"./methods\";","import { ValidatedMethod } from 'meteor/mdg:validated-method';\r\nimport SimpleSchema from 'simpl-schema';\r\nimport { Enrollment } from './collection';\r\nimport { Courses } from '../courses/collection';\r\nimport { Students } from '../students/collection';\r\n\r\n//insertEnrollment Method\r\nnew ValidatedMethod({\r\n    name: 'insertEnrollment',\r\n    mixins: [],\r\n    validate: new SimpleSchema({\r\n        student_id: { type: String },\r\n        course_id: { type: String },\r\n        enrollment_date: { type: Date },\r\n        enrollment_cost: { type: Number },\r\n    }).validator(),\r\n    async run(enrollmentData) {\r\n        console.log('Received enrollment data:', enrollmentData);\r\n\r\n        if (!this.userId) {\r\n            throw new Meteor.Error('Not authorized', 'You must be logged in to enroll in courses.');\r\n        }\r\n\r\n        try {\r\n            // Ensure course exists\r\n            const course = await Courses.findOneAsync(enrollmentData.course_id);\r\n            if (!course) {\r\n                throw new Meteor.Error('Invalid course', 'The specified course does not exist.');\r\n            }\r\n\r\n            console.log('Course found:', course);\r\n\r\n            // Ensure student exists\r\n            const student = await Students.findOneAsync(enrollmentData.student_id);\r\n            if (!student) {\r\n                throw new Meteor.Error('Invalid student', 'The specified student does not exist.');\r\n            }\r\n\r\n            console.log('Student found:', student);\r\n\r\n            // Check current enrollment count for the course\r\n            const enrollmentCount = await Enrollment.find({ course_id: enrollmentData.course_id }).countAsync();\r\n            if (enrollmentCount >= 25) {\r\n                throw new Meteor.Error('Course full', 'This course has reached its maximum capacity of 25 students.');\r\n            }\r\n\r\n            // Insert the enrollment data into the Enrollment collection\r\n            const enrollmentId = await Enrollment.insertAsync(enrollmentData);\r\n            console.log('Inserted enrollment ID:', enrollmentId);\r\n\r\n            return enrollmentId;\r\n        } catch (error) {\r\n            console.error('Error during insert:', error);\r\n            throw new Meteor.Error('Database Error', `Failed to insert enrollment: ${error.message}`);\r\n        }\r\n    },\r\n});\r\n\r\n// Fetch Enrollments Method\r\nnew ValidatedMethod({\r\n    name: 'fetchEnrollments',\r\n    mixins: [],\r\n    validate: null, // No validation needed for fetching enrollments\r\n    async run() {\r\n        if (!this.userId) {\r\n            throw new Meteor.Error('Not authorized', 'You must be logged in to fetch enrollments.');\r\n        }\r\n\r\n        try {\r\n            console.log('Fetching all enrollments');  // Log when fetch operation starts\r\n            const enrollmentsList = await Enrollment.find().fetch();\r\n            console.log('Fetched enrollments:', enrollmentsList);  // Log the fetched enrollments list\r\n            return enrollmentsList; // Return the list of enrollments\r\n        } catch (error) {\r\n            console.error('Failed to fetch enrollments:', error);  // Log any fetch errors\r\n            throw new Meteor.Error('Database Error', `Failed to fetch enrollments: ${error.message}`);\r\n        }\r\n    },\r\n});\r\n\r\n// Delete Enrollment Method\r\nnew ValidatedMethod({\r\n    name: 'deleteEnrollment',\r\n    mixins: [],\r\n    validate: new SimpleSchema({\r\n        _id: { type: String },\r\n    }).validator(),\r\n    async run({ _id }) {\r\n        if (!this.userId) {\r\n            throw new Meteor.Error('Not authorized', 'You must be logged in to delete enrollments.');\r\n        }\r\n\r\n        try {\r\n            await Enrollment.removeAsync({ _id });\r\n            return { message: 'Enrollment deleted successfully!' };\r\n        } catch (error) {\r\n            throw new Meteor.Error('Database Error', `Failed to delete enrollment: ${error.message}`);\r\n        }\r\n    },\r\n});\r\n\r\n// Update Enrollment Method\r\nnew ValidatedMethod({\r\n    name: 'updateEnrollment',\r\n    mixins: [],\r\n    validate: new SimpleSchema({\r\n        _id: { type: String },\r\n        student_id: { type: String },\r\n        course_id: { type: String },\r\n        enrollment_date: { type: Date },\r\n        enrollment_cost: { type: Number }, // Added enrollment_cost\r\n    }).validator(),\r\n    async run({ _id, student_id, course_id, enrollment_date, enrollment_cost }) {\r\n        if (!this.userId) {\r\n            throw new Meteor.Error('Not authorized', 'You must be logged in to update enrollments.');\r\n        }\r\n\r\n        try {\r\n            await Enrollment.updateAsync({ _id }, {\r\n                $set: {\r\n                    student_id,\r\n                    course_id,\r\n                    enrollment_date,\r\n                    enrollment_cost, // Added enrollment_cost\r\n                },\r\n            });\r\n\r\n            return { message: 'Enrollment updated successfully!' };\r\n        } catch (error) {\r\n            throw new Meteor.Error('Database Error', `Failed to update enrollment: ${error.message}`);\r\n        }\r\n    },\r\n});\r\n","import { Mongo } from 'meteor/mongo';\r\nimport SimpleSchema from 'simpl-schema';\r\n\r\n\r\nexport const Students = new Mongo.Collection('students');\r\n\r\nconst StudentsSchema = new SimpleSchema({\r\n  first_name: {\r\n    type: String,\r\n    label: \"First Name\",\r\n    max: 50,\r\n  },\r\n  last_name: {\r\n    type: String,\r\n    label: \"Last Name\",\r\n    max: 50,\r\n  },\r\n  date_of_birth: {\r\n    type: Date,\r\n    label: \"Date of Birth\",\r\n  },\r\n  email: {\r\n    type: String,\r\n    label: \"Email\",\r\n  },\r\n  phone: {\r\n    type: String,\r\n    label: \"Phone Number\",\r\n    max: 15,\r\n  },\r\n  // enrolled_courses: {\r\n  //   type: Array,\r\n  //   label: \"Enrolled Courses\",\r\n  //   optional: true,\r\n  // },\r\n  // 'enrolled_courses.$': {\r\n  //   type: String, // Assuming course IDs are stored as strings\r\n  // },\r\n  address: {\r\n    type: String,\r\n    label: \"Address\",\r\n    optional: true, // Optional field\r\n  },\r\n});\r\n\r\nStudents.attachSchema?.(StudentsSchema);\r\n","import \"./methods\";","import { ValidatedMethod } from 'meteor/mdg:validated-method';\r\nimport SimpleSchema from 'simpl-schema';\r\nimport { Students } from './collection'; // Ensure this import is correct\r\n\r\n// Insert Student Method\r\nnew ValidatedMethod({\r\n  name: 'insertStudents',\r\n  mixins: [],\r\n  validate: new SimpleSchema({\r\n    first_name: { type: String, max: 50 },\r\n    last_name: { type: String, max: 50 },\r\n    email: { type: String }, // Email validation\r\n    phone: { type: String, max: 15 },\r\n    date_of_birth: { type: Date },\r\n    address: { type: String, optional: true },\r\n  }).validator(),\r\n  async run(studentData) {\r\n    if (!this.userId) {\r\n      throw new Meteor.Error('Not authorized', 'You must be logged in to add students.');\r\n    }\r\n\r\n    console.log('Inserting student data:', studentData);  // Log student data to check the content\r\n\r\n    try {\r\n      // Use insertAsync() instead of insert()\r\n      const studentId = await Students.insertAsync(studentData);\r\n      console.log('Inserted student ID:', studentId);  // Log the inserted student ID\r\n      return studentId; // Return the student ID on successful insertion\r\n    } catch (error) {\r\n      console.error('Failed to insert student:', error);  // Log the actual error\r\n      throw new Meteor.Error('Database Error', `Failed to insert student: ${error.message}`);\r\n    }\r\n  },\r\n});\r\n\r\n// Fetch Students Method\r\nnew ValidatedMethod({\r\n  name: 'fetchStudents',\r\n  mixins: [],\r\n  validate: null, // No validation needed for fetching students\r\n  async run() {\r\n    if (!this.userId) {\r\n      throw new Meteor.Error('Not authorized', 'You must be logged in to fetch students.');\r\n    }\r\n\r\n    try {\r\n      console.log('Fetching all students');  // Log when fetch operation starts\r\n      const studentsList = await Students.find().fetch();\r\n      console.log('Fetched students:', studentsList);  // Log the fetched students list\r\n      return studentsList; // Return the list of students\r\n    } catch (error) {\r\n      console.error('Failed to fetch students:', error);  // Log any fetch errors\r\n      throw new Meteor.Error('Database Error', `Failed to fetch students: ${error.message}`);\r\n    }\r\n  },\r\n});\r\n\r\n// Delete Student Method\r\nnew ValidatedMethod({\r\n  name: 'deleteStudent',\r\n  mixins: [],\r\n  validate: new SimpleSchema({\r\n    _id: { type: String },\r\n  }).validator(),\r\n  async run({ _id }) {\r\n    if (!this.userId) {\r\n      throw new Meteor.Error('Not authorized', 'You must be logged in to delete students.');\r\n    }\r\n\r\n    try {\r\n      await Students.removeAsync({ _id });\r\n      return { message: 'Student deleted successfully!' };\r\n    } catch (error) {\r\n      throw new Meteor.Error('Database Error', `Failed to delete student: ${error.message}`);\r\n    }\r\n  },\r\n});\r\n\r\n// Update Student Method\r\nnew ValidatedMethod({\r\n  name: 'updateStudent',\r\n  mixins: [],\r\n  validate: new SimpleSchema({\r\n    _id: { type: String },\r\n    first_name: { type: String, optional: true },\r\n    last_name: { type: String, optional: true },\r\n    email: { type: String, optional: true },\r\n    phone: { type: String, optional: true },\r\n    date_of_birth: { type: Date, optional: true },\r\n    address: { type: String, optional: true },\r\n  }).validator(),\r\n  async run(studentData) {\r\n    if (!this.userId) {\r\n      throw new Meteor.Error('Not authorized', 'You must be logged in to update students.');\r\n    }\r\n\r\n    try {\r\n      const { _id, ...updateData } = studentData;\r\n      return await Students.updateAsync({ _id }, { $set: updateData });\r\n    } catch (error) {\r\n      throw new Meteor.Error('Database Error', `Failed to update student: ${error.message}`);\r\n    }\r\n  },\r\n});\r\n","import { Mongo } from 'meteor/mongo';\r\nimport SimpleSchema from 'simpl-schema';\r\n\r\n// const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\nexport const Teachers = new Mongo.Collection('teachers');\r\n\r\nconst TeachersSchema = new SimpleSchema({\r\n    first_name: {\r\n        type: String,\r\n        label: \"First Name\",\r\n    },\r\n    last_name: {\r\n        type: String,\r\n        label: \"Last Name\",\r\n    },\r\n    email: {\r\n        type: String,\r\n        // regEx: emailRegex,\r\n        label: \"Email\",\r\n    },\r\n    phone: {\r\n        type: String,\r\n        label: \"Phone Number\",\r\n    },\r\n    subject: {\r\n        type: String,\r\n        label: \"Subject\",\r\n    },\r\n    // courses_taught: {\r\n    //     type: Array,\r\n    //     label: \"Courses Taught\",\r\n    //     optional: true,\r\n    // },\r\n    // 'courses_taught.$': {\r\n    //     type: String,  \r\n    // },\r\n});\r\n\r\nTeachers.attachSchema?.(TeachersSchema);\r\n\r\n","import \"./methods\";","import { ValidatedMethod } from 'meteor/mdg:validated-method';\r\nimport SimpleSchema from 'simpl-schema';\r\nimport { Teachers } from './collection';\r\n\r\n// Insert Teacher Method\r\nnew ValidatedMethod({\r\n  name: 'insertTeachers',\r\n  mixins: [],\r\n  validate: new SimpleSchema({\r\n    first_name: { type: String },\r\n    last_name: { type: String },\r\n    email: { type: String },\r\n    phone: { type: String },\r\n    subject: { type: String },\r\n    // Removed courses_taught from the schema\r\n  }).validator(),\r\n  async run(teacherData) {\r\n    if (!this.userId) {\r\n      throw new Meteor.Error(\r\n        'Not authorized',\r\n        'You must be logged in to add teachers.'\r\n      );\r\n    }\r\n\r\n    try {\r\n      return await Teachers.insertAsync(teacherData);\r\n    } catch (error) {\r\n      throw new Meteor.Error(\r\n        'Database Error',\r\n        `Failed to insert teacher: ${error.message}`\r\n      );\r\n    }\r\n  },\r\n});\r\n\r\n// Fetch All Teachers Method\r\nnew ValidatedMethod({\r\n  name: 'fetchTeachers',\r\n  mixins: [],\r\n  validate: null,\r\n  async run() {\r\n    if (!this.userId) {\r\n      throw new Meteor.Error(\r\n        'Not authorized',\r\n        'You must be logged in to fetch teachers.'\r\n      );\r\n    }\r\n\r\n    try {\r\n      return await Teachers.find().fetch();\r\n    } catch (error) {\r\n      throw new Meteor.Error(\r\n        'Database Error',\r\n        `Failed to fetch teachers: ${error.message}`\r\n      );\r\n    }\r\n  },\r\n});\r\n\r\n// Delete Teacher Method\r\nnew ValidatedMethod({\r\n  name: 'deleteTeachers',\r\n  mixins: [],\r\n  validate: new SimpleSchema({\r\n    _id: { type: String },\r\n  }).validator(),\r\n  async run({ _id }) {\r\n    if (!this.userId) {\r\n      throw new Meteor.Error(\r\n        'Not authorized',\r\n        'You must be logged in to delete teachers.'\r\n      );\r\n    }\r\n\r\n    try {\r\n      await Teachers.removeAsync({ _id });\r\n      return { message: 'គ្រូបានលុបដោយជោគជ័យ!' };\r\n    } catch (error) {\r\n      throw new Meteor.Error(\r\n        'Database Error',\r\n        `Failed to delete teacher: ${error.message}`\r\n      );\r\n    }\r\n  },\r\n});\r\n\r\n// Update Teacher Method\r\nnew ValidatedMethod({\r\n  name: 'updateTeachers',\r\n  mixins: [],\r\n  validate: new SimpleSchema({\r\n    _id: { type: String },\r\n    first_name: { type: String },\r\n    last_name: { type: String },\r\n    email: { type: String },\r\n    phone: { type: String },\r\n    subject: { type: String },\r\n    // Removed courses_taught from the schema\r\n  }).validator(),\r\n  async run(teacherData) {\r\n    if (!this.userId) {\r\n      throw new Meteor.Error(\r\n        'Not authorized',\r\n        'You must be logged in to update teachers.'\r\n      );\r\n    }\r\n    try {\r\n      const { _id, ...updateData } = teacherData;\r\n      return await Teachers.updateAsync({ _id }, { $set: updateData });\r\n    } catch (error) {\r\n      throw new Meteor.Error(\r\n        'Database Error',\r\n        `Failed to update teacher: ${error.message}`\r\n      );\r\n    }\r\n  },\r\n});\r\n","import \"./Auth/projects\";\r\nimport \"./students\";\r\nimport \"./courses\";\r\nimport \"./teachers\";\r\nimport \"./enrollment\";","import \"../imports/api\";\r\n"]}